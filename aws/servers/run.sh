#!/usr/bin/env bash

COMMAND="${1}"

SCRIPT_DIR=$(cd `dirname $0` && pwd)
FILE_NAME=$(echo ${SCRIPT_DIR} | sed -e 's/[\/_]/-/g')

TFPLAN="${FILE_NAME#"-"}-$(date "+%d-%m-%Y").tfplan"
TFVARS="${SCRIPT_DIR}/backend-prod.tfvars"

if ! [[ -e "${TFVARS}" ]]; then
    echo -e "Cannot find tfvars file: ${TFVARS} in ${SCRIPT_DIR}"
    ls -alt "${SCRIPT_DIR}"
    exit 1
fi

cd "${SCRIPT_DIR}"

# Check plan file is created before proceeding to validation & apply
check_tf_plan() {
    if ! [[ -e "${TFPLAN}" ]]; then
        echo -e "Cannot find plan file: ${TFPLAN} in ${SCRIPT_DIR}"
        ls -alt "${SCRIPT_DIR}"
        exit 1
    fi
}

# Initialize a working directory containing Terraform configuration files
command_tf_init ()
{
    if ! [ -d "${SCRIPT_DIR}/.terraform" ]; then
        terraform init -input=false -backend=true -backend-config="${TFVARS}"
        INIT_RESULT=$?

        if [ ${INIT_RESULT} -ne 0 ]; then
            echo "Terraform initialization failed. Please see the error message."
            exit 1
        fi
    else
        echo -e "The working directory containing Terraform configuration files is already initialized.\n"
    fi
}

# Format the template files and validate the syntax of the Terraform files
command_tf_validate ()
{
    command_tf_init

    terraform fmt

    terraform validate -var-file="${TFVARS}" -input=false
    VALIDATE_RESULT=$?

    if [ ${VALIDATE_RESULT} -ne 0 ]; then
        echo "Terraform validation failed. Please see the error message."
        exit 1
    else
        echo -e "Terraform configuration files formatting completed & validated successfully.\n"
    fi
}

# Create an execution plan & will also performs a refresh using the variables provided & output will be store to a file
command_tf_plan ()
{
    command_tf_init

    terraform plan -out="${TFPLAN}" -var-file="${TFVARS}" -input=false

    check_tf_plan
    echo -e "OR select 'apply' option (5)\n"
}

# Remove plan file
command_tf_remove_plan ()
{
    check_tf_plan
    rm "${SCRIPT_DIR}/${TFPLAN}"
    echo -e "Removed the stored plan file: ${TFPLAN} in \"${SCRIPT_DIR}\"".
}

# Apply the changes required to reach the desired state of the configuration, or the pre-determined set of actions
# generated by a Terraform plan execution plan with the user prompted to approve or cancel to proceed the execution
command_tf_apply()
{
    check_tf_plan

    echo "Terraform will perform the actions described in the ${TFPLAN}. If you would like to apply select 'Yes' to approve."
    select yn in "Yes" "No"; do
        case $yn in
            Yes )
                #terraform apply -lock=true -input=false "${TFPLAN}"
                exit 0
                ;;
            No )
                echo -e "Terraform apply cancelled. You can select 'apply' option (5) from the run script\nOR manually run the following command inside \"${SCRIPT_DIR}\" directory:\n# terraform apply -lock=true -input=false \"${TFPLAN}\""
                exit 0
                ;;
        esac
    done
}

# Set PS3 prompt (default is set to #?)
PS3="Select from the options to execute Or press enter to list the options again: "

COLUMNS=12
OPTIONS=("init" "validate" "plan" "validate-plan" "apply" "remove-plan" "quit")

select OPT in "${OPTIONS[@]}"
do
    case "${OPT}" in
        "init")
            command_tf_init
            ;;

        "validate")
            command_tf_validate
            ;;

        "plan")
            command_tf_plan
            ;;

         "validate-plan")
            command_tf_validate
            command_tf_plan
            ;;

        "apply")
            command_tf_apply
            ;;

        "remove-plan")
            command_tf_remove_plan
            ;;

        "quit")
            break
            ;;

        *)
			echo -e "Error: Invalid option $REPLY. Please try again (select 1..${#OPTIONS[@]})\n"
			;;
    esac
done